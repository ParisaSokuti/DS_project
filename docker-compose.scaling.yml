# Docker Compose Configuration for Horizontal Scaling

version: '3.8'

services:
  # HAProxy Load Balancer
  load-balancer:
    image: haproxy:2.8
    container_name: hokm-load-balancer
    ports:
      - "8765:8765"  # Main WebSocket port
      - "8766:8766"  # SSL WebSocket port
      - "8404:8404"  # HAProxy stats
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - hokm-server-1
      - hokm-server-2
    networks:
      - hokm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster for Data Persistence
  redis-master:
    image: redis:7.2-alpine
    container_name: hokm-redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
      - ./config/redis-master.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - hokm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-replica:
    image: redis:7.2-alpine
    container_name: hokm-redis-replica
    ports:
      - "6380:6379"
    volumes:
      - redis-replica-data:/data
      - ./config/redis-replica.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    depends_on:
      - redis-master
    networks:
      - hokm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Game Server Instances
  hokm-server-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hokm-server-1
    environment:
      - PORT=8001
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - INSTANCE_ID=hokm-server-1
      - MIN_INSTANCES=2
      - MAX_INSTANCES=10
    ports:
      - "8001:8001"
    depends_on:
      - redis-master
    networks:
      - hokm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  hokm-server-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hokm-server-2
    environment:
      - PORT=8002
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - INSTANCE_ID=hokm-server-2
      - MIN_INSTANCES=2
      - MAX_INSTANCES=10
    ports:
      - "8002:8002"
    depends_on:
      - redis-master
    networks:
      - hokm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Auto-Scaler Service
  auto-scaler:
    build:
      context: .
      dockerfile: Dockerfile.autoscaler
    container_name: hokm-auto-scaler
    environment:
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - MIN_INSTANCES=2
      - MAX_INSTANCES=10
      - SCALING_INTERVAL=60
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/autoscaler.yml:/app/config/autoscaler.yml:ro
    depends_on:
      - redis-master
    networks:
      - hokm-network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: hokm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - hokm-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: hokm-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - hokm-network
    restart: unless-stopped

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: hokm-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - hokm-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: hokm-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - hokm-network
    restart: unless-stopped

networks:
  hokm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-master-data:
    driver: local
  redis-replica-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

# Scaling profiles for different environments
x-scaling-profiles:
  development: &dev-profile
    min_instances: 1
    max_instances: 3
    cpu_limit: "0.5"
    memory_limit: "256M"
  
  staging: &staging-profile
    min_instances: 2
    max_instances: 6
    cpu_limit: "1.0"
    memory_limit: "512M"
  
  production: &prod-profile
    min_instances: 4
    max_instances: 20
    cpu_limit: "2.0"
    memory_limit: "1G"
