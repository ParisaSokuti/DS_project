# Docker Compose Configuration for Hokm Game Server with PostgreSQL
# Optimized for gaming workloads with Redis integration

version: '3.8'

services:
  # PostgreSQL Database - Primary data store
  postgres-primary:
    image: postgres:15.4-alpine
    container_name: hokm-postgres-primary
    restart: unless-stopped
    environment:
      # Database credentials
      POSTGRES_DB: ${POSTGRES_DB:-hokm_game}
      POSTGRES_USER: ${POSTGRES_USER:-hokm_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hokm_secure_2024!}
      
      # Performance settings
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements,pg_buffercache
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-200}
      
      # Gaming-specific optimizations
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_WORK_MEM: ${POSTGRES_WORK_MEM:-4MB}
      
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    volumes:
      # Data persistence
      - postgres_data:/var/lib/postgresql/data
      
      # Custom configuration
      - ./config/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      
      # Initialization scripts
      - ./config/postgresql/init:/docker-entrypoint-initdb.d:ro
      
      # Backup directory
      - postgres_backups:/backups
    
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hokm_admin} -d ${POSTGRES_DB:-hokm_game}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    networks:
      - hokm-network
    
    labels:
      - "traefik.enable=false"
      - "service.name=hokm-postgres-primary"
      - "service.type=database"

  # PostgreSQL Read Replica (for scaling)
  postgres-replica:
    image: postgres:15.4-alpine
    container_name: hokm-postgres-replica
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hokm_game}
      POSTGRES_USER: ${POSTGRES_USER:-hokm_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hokm_secure_2024!}
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-repl_secure_2024!}
    
    ports:
      - "${POSTGRES_REPLICA_PORT:-5433}:5432"
    
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./config/postgresql/replica.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    
    depends_on:
      postgres-primary:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hokm_admin} -d ${POSTGRES_DB:-hokm_game}"]
      interval: 30s
      timeout: 10s
      retries: 5
    
    networks:
      - hokm-network

  # Redis - Session management and caching
  redis-master:
    image: redis:7.2-alpine
    container_name: hokm-redis-master
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_2024!}
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-redis_secure_2024!}
    
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_secure_2024!}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    
    networks:
      - hokm-network

  # pgBouncer - Connection pooling
  pgbouncer:
    image: pgbouncer/pgbouncer:1.20.1
    container_name: hokm-pgbouncer
    restart: unless-stopped
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER:-hokm_admin}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-hokm_secure_2024!}
      DATABASES_DBNAME: ${POSTGRES_DB:-hokm_game}
      
      # Connection pooling settings
      POOL_MODE: ${PGBOUNCER_POOL_MODE:-transaction}
      DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE:-25}
      MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN:-100}
      SERVER_ROUND_ROBIN: 1
      
      # Authentication
      AUTH_TYPE: md5
      AUTH_USER: ${POSTGRES_USER:-hokm_admin}
    
    ports:
      - "${PGBOUNCER_PORT:-6432}:5432"
    
    volumes:
      - ./config/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./config/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    
    depends_on:
      postgres-primary:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "5432"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - hokm-network

  # Game Server
  hokm-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hokm-game-server
    restart: unless-stopped
    environment:
      # Database connections
      DATABASE_URL: postgresql://${POSTGRES_USER:-hokm_admin}:${POSTGRES_PASSWORD:-hokm_secure_2024!}@pgbouncer:5432/${POSTGRES_DB:-hokm_game}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-hokm_admin}:${POSTGRES_PASSWORD:-hokm_secure_2024!}@postgres-replica:5432/${POSTGRES_DB:-hokm_game}
      
      # Redis connection
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_2024!}@redis-master:6379/0
      
      # Server configuration
      PORT: ${SERVER_PORT:-8765}
      HOST: ${SERVER_HOST:-0.0.0.0}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_here}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
    
    ports:
      - "${SERVER_PORT:-8765}:8765"
    
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - hokm-network

  # Database Administration
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: hokm-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@hokm.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_secure_2024!}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
    
    depends_on:
      postgres-primary:
        condition: service_healthy
    
    networks:
      - hokm-network

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: hokm-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    networks:
      - hokm-network

  grafana:
    image: grafana/grafana:10.1.5
    container_name: hokm-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_secure_2024!}
      GF_USERS_ALLOW_SIGN_UP: false
    
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    depends_on:
      - prometheus
    
    networks:
      - hokm-network

  # Database backup service
  postgres-backup:
    image: postgres:15.4-alpine
    container_name: hokm-postgres-backup
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hokm_game}
      POSTGRES_USER: ${POSTGRES_USER:-hokm_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hokm_secure_2024!}
      POSTGRES_HOST: postgres-primary
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '${BACKUP_SCHEDULE:-0 2 * * *} /backup.sh' | crontab - &&
        crond -f
      "
    
    depends_on:
      postgres-primary:
        condition: service_healthy
    
    networks:
      - hokm-network

# Networks
networks:
  hokm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1

# Volumes
volumes:
  # PostgreSQL data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  
  postgres_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres_replica
  
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/backups
  
  # Redis data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  
  # Monitoring data
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  # Admin tools
  pgadmin_data:
    driver: local

# Development override (use with docker-compose -f docker-compose.yml -f docker-compose.dev.yml up)
---
# docker-compose.dev.yml
version: '3.8'

services:
  postgres-primary:
    environment:
      # Development settings - less restrictive
      POSTGRES_MAX_CONNECTIONS: 50
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_WORK_MEM: 2MB
    
    # Enable debug logging in development
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c log_statement=all
      -c log_min_duration_statement=0
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

  # Remove replica in development
  postgres-replica:
    profiles: ["production"]

  hokm-server:
    environment:
      DEBUG: true
      LOG_LEVEL: DEBUG
    
    # Enable hot reload for development
    volumes:
      - .:/app
      - ./logs:/app/logs
    
    # Override command for development
    command: python -m debugpy --listen 0.0.0.0:5678 --wait-for-client server.py

---
# docker-compose.prod.yml  
version: '3.8'

services:
  postgres-primary:
    # Production optimizations
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    environment:
      # Production settings
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 2GB

  postgres-replica:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  hokm-server:
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Production load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: hokm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - hokm-server
    networks:
      - hokm-network
