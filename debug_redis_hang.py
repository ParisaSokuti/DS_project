#!/usr/bin/env python3
"""
Quick test to debug Redis connection and circuit breaker
"""

def debug_redis_issue():
    print("=== Debugging Redis Game State Issue ===\n")
    
    print("💡 **ISSUE ANALYSIS:**")
    print("   Flow stops at 'Step 4: Getting game state'")
    print("   This suggests get_game_state() is hanging or blocking")
    print()
    
    print("🔍 **POTENTIAL CAUSES:**")
    print()
    print("1. **Redis Connection Issue:**")
    print("   - Redis server might be unresponsive")
    print("   - Network timeout on Redis operations")
    print("   - Redis command hanging (hgetall)")
    print()
    print("2. **Circuit Breaker Issue:**") 
    print("   - Circuit might be open and waiting")
    print("   - Circuit breaker call() method hanging")
    print("   - Deadlock in circuit breaker logic")
    print()
    print("3. **JSON Parsing Issue:**")
    print("   - Large game state causing JSON parsing to hang")
    print("   - Corrupted data in Redis causing infinite loop")
    print()
    print("4. **Thread Pool Issue:**")
    print("   - ThreadPoolExecutor might be blocking")
    print("   - Async/sync boundary issues")
    print()
    
    print("🛠️  **IMMEDIATE FIXES TO TRY:**")
    print()
    print("1. **Add Redis-level debugging:**")
    print("   In redis_manager_resilient.py get_game_state():")
    print("   ```python")
    print("   def get_game_state(self, room_code: str) -> dict:")
    print("       print(f'[DEBUG] get_game_state called for room {room_code}')")
    print("       def _redis_get():")
    print("           print(f'[DEBUG] Starting Redis hgetall...')")
    print("           key = f'game:{room_code}:state'")
    print("           print(f'[DEBUG] Redis key: {key}')")
    print("           raw_state = self.redis.hgetall(key)")
    print("           print(f'[DEBUG] Redis hgetall completed, got {len(raw_state)} items')")
    print("           # ... rest of function")
    print("   ```")
    print()
    print("2. **Add circuit breaker debugging:**")
    print("   ```python")
    print("   print(f'[DEBUG] Circuit breaker state: {self.circuits[\"read\"].state}')")
    print("   result = self.circuits['read'].call(...)")
    print("   print(f'[DEBUG] Circuit call completed: success={result.success}')")
    print("   ```")
    print()
    print("3. **Add timeout to Redis operations:**")
    print("   ```python")
    print("   # Add socket timeout to Redis connection")
    print("   self.redis = redis.Redis(..., socket_timeout=2.0, socket_connect_timeout=2.0)")
    print("   ```")
    print()
    print("4. **Bypass circuit breaker temporarily:**")
    print("   ```python")
    print("   # For debugging, call _redis_get() directly")
    print("   try:")
    print("       return _redis_get()")
    print("   except Exception as e:")
    print("       print(f'[ERROR] Direct Redis call failed: {e}')")
    print("       return {}")
    print("   ```")

def suggest_immediate_test():
    print("\n🚀 **IMMEDIATE TEST:**")
    print()
    print("Add this simple debug to redis_manager_resilient.py get_game_state():")
    print()
    print("```python")
    print("def get_game_state(self, room_code: str) -> dict:")
    print("    print(f'[DEBUG] === get_game_state START for {room_code} ===')")
    print("    import time")
    print("    start_time = time.time()")
    print("    ")
    print("    def _redis_get():")
    print("        print(f'[DEBUG] _redis_get START')")
    print("        key = f'game:{room_code}:state'")
    print("        print(f'[DEBUG] About to call hgetall on key: {key}')")
    print("        raw_state = self.redis.hgetall(key)")
    print("        print(f'[DEBUG] hgetall completed, items: {len(raw_state)}')")
    print("        # ... rest of existing code ...")
    print("        return state")
    print("    ")
    print("    print(f'[DEBUG] About to call circuit breaker...')")
    print("    result = self.circuits['read'].call(_redis_get, ...)")
    print("    ")
    print("    elapsed = time.time() - start_time")
    print("    print(f'[DEBUG] === get_game_state END ({elapsed:.2f}s) ===')")
    print("    return result.value if result.success else {}")
    print("```")
    print()
    print("This will show exactly where the hang occurs!")

if __name__ == "__main__":
    debug_redis_issue()
    suggest_immediate_test()
