# CI/CD Pipeline for Database Deployments
# GitHub Actions workflow for PostgreSQL database automation

name: Database Deployment Pipeline

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'backend/database/**'
      - 'tests/migrations/**'
      - '.github/workflows/database.yml'
      - 'database/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/database/**'
      - 'tests/migrations/**'

env:
  POSTGRES_VERSION: '15'
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Validate database changes
  validate:
    name: Validate Database Changes
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: hokm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov bandit safety

    - name: Security scan for database code
      run: |
        bandit -r backend/database/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Validate migration syntax
      run: |
        python -m py_compile tests/migration_framework.py
        python -m py_compile tests/data_migration_utils.py
        python -c "
        import sys
        sys.path.append('.')
        from tests.migration_framework import MigrationFramework
        print('Migration framework syntax validation passed')
        "

    - name: Test database models
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/hokm_test
      run: |
        python -c "
        import asyncio
        from backend.database.models import Base
        from sqlalchemy.ext.asyncio import create_async_engine
        
        async def test_models():
            engine = create_async_engine('${{ env.TEST_DATABASE_URL }}')
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            await engine.dispose()
            print('Database models validation passed')
        
        asyncio.run(test_models())
        "

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Test migrations
  test-migrations:
    name: Test Database Migrations
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        environment: [development, staging]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: hokm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test databases
      run: |
        PGPASSWORD=test_password psql -h localhost -U test_user -d hokm_test -c "
        CREATE DATABASE hokm_test_migration;
        CREATE DATABASE hokm_test_rollback;
        "

    - name: Test migration framework
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/hokm_test_migration
        MIGRATION_ENV: ${{ matrix.environment }}
      run: |
        cd tests
        python -m pytest migration_testing.py -v --tb=short

    - name: Test rollback procedures
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/hokm_test_rollback
      run: |
        cd tests
        python migration_example.py \
          --database-url $TEST_DATABASE_URL \
          --environment development \
          --target-revision head

    - name: Generate migration test report
      run: |
        echo "Migration tests completed for ${{ matrix.environment }}" > migration-report-${{ matrix.environment }}.txt
        echo "Status: Success" >> migration-report-${{ matrix.environment }}.txt

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: migration-test-reports
        path: migration-report-*.txt

  # Job 3: Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, test-migrations]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure staging environment
      run: |
        echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> $GITHUB_ENV
        echo "BACKUP_STORAGE_URL=${{ secrets.STAGING_BACKUP_URL }}" >> $GITHUB_ENV
        echo "DEPLOYMENT_ENV=staging" >> $GITHUB_ENV

    - name: Run database deployment
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        BACKUP_ENCRYPTION_KEY: ${{ secrets.BACKUP_ENCRYPTION_KEY }}
      run: |
        python database/deploy.py \
          --environment staging \
          --database-url "$DATABASE_URL" \
          --enable-backup \
          --run-smoke-tests

    - name: Run smoke tests
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
      run: |
        python database/smoke_tests.py --environment staging

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 4: Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure production environment
      run: |
        echo "DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" >> $GITHUB_ENV
        echo "BACKUP_STORAGE_URL=${{ secrets.PRODUCTION_BACKUP_URL }}" >> $GITHUB_ENV
        echo "DEPLOYMENT_ENV=production" >> $GITHUB_ENV

    - name: Create deployment backup
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        BACKUP_STORAGE_URL: ${{ secrets.PRODUCTION_BACKUP_URL }}
        BACKUP_ENCRYPTION_KEY: ${{ secrets.BACKUP_ENCRYPTION_KEY }}
      run: |
        python database/backup.py \
          --environment production \
          --create-deployment-backup \
          --upload-to-storage

    - name: Run production deployment
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        BACKUP_ENCRYPTION_KEY: ${{ secrets.BACKUP_ENCRYPTION_KEY }}
        DEPLOYMENT_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        python database/deploy.py \
          --environment production \
          --database-url "$DATABASE_URL" \
          --enable-backup \
          --maintenance-mode \
          --run-smoke-tests

    - name: Run comprehensive smoke tests
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: |
        python database/smoke_tests.py \
          --environment production \
          --comprehensive

    - name: Update deployment tracking
      run: |
        python database/deployment_tracking.py \
          --environment production \
          --status success \
          --commit-sha ${{ github.sha }}

    - name: Notify production deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 5: Rollback on failure
  rollback-on-failure:
    name: Rollback Failed Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Execute emergency rollback
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        BACKUP_STORAGE_URL: ${{ secrets.PRODUCTION_BACKUP_URL }}
        BACKUP_ENCRYPTION_KEY: ${{ secrets.BACKUP_ENCRYPTION_KEY }}
      run: |
        python database/rollback.py \
          --environment production \
          --emergency \
          --restore-from-backup

    - name: Validate rollback
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: |
        python database/smoke_tests.py \
          --environment production \
          --post-rollback

    - name: Notify rollback completion
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "🚨 Production deployment failed and has been rolled back",
            channel: "#production-alerts",
            username: "Database Deployment Bot",
            icon_emoji: ":warning:"
          }
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
