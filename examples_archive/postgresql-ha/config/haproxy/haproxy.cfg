global
    daemon
    user haproxy
    group haproxy
    
    # Logging
    log stdout:514 local0 info
    
    # Security
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock user haproxy group haproxy mode 660 level admin
    stats timeout 30s
    
    # Performance
    nbproc 1
    nbthread 4
    maxconn 4096
    
    # SSL/TLS (if needed)
    # tune.ssl.default-dh-param 2048
    
defaults
    mode tcp
    log global
    option tcplog
    option dontlognull
    
    timeout connect 5s
    timeout client 30s
    timeout server 30s
    timeout check 5s
    
    retries 3
    option redispatch
    maxconn 2048

# Statistics interface
stats enable
stats uri /stats
stats refresh 30s
stats admin if TRUE

# Frontend for PostgreSQL connections
frontend postgresql_frontend
    bind *:5432
    mode tcp
    default_backend postgresql_primary
    
    # ACL for read-only queries (basic pattern matching)
    # Note: This is simplified - in production, consider using pg_bouncer for better query routing
    acl is_read_query payload(0,20) -m reg -i "^.*(select|show|explain|describe).*"
    
    # Route read queries to replicas if available
    use_backend postgresql_replicas if is_read_query

# Primary backend for write operations
backend postgresql_primary
    mode tcp
    balance first
    option tcp-check
    
    # Health check for PostgreSQL
    tcp-check connect
    tcp-check send-binary 00000016 # length
    tcp-check send-binary 00030000 # protocol version
    tcp-check send-binary 7573657200 # user\0
    tcp-check send-binary 706f737467726573 # postgres
    tcp-check send-binary 0064617461626173650068656c6c6f00 # database\0hello\0
    tcp-check send-binary 00 # terminator
    tcp-check expect binary 52 # Authentication OK
    
    # Primary server (via Patroni leader)
    server postgresql-primary postgresql-primary:5432 check inter 2s rise 2 fall 3
    
# Replica backend for read operations
backend postgresql_replicas
    mode tcp
    balance roundrobin
    option tcp-check
    
    # Health check for PostgreSQL replicas
    tcp-check connect
    tcp-check send-binary 00000016
    tcp-check send-binary 00030000
    tcp-check send-binary 7573657200
    tcp-check send-binary 706f737467726573
    tcp-check send-binary 0064617461626173650068656c6c6f00
    tcp-check send-binary 00
    tcp-check expect binary 52
    
    # Replica servers
    server postgresql-replica1 postgresql-replica1:5432 check inter 2s rise 2 fall 3
    server postgresql-replica2 postgresql-replica2:5432 check inter 2s rise 2 fall 3 backup
    
    # Fallback to primary if no replicas available
    server postgresql-primary-fallback postgresql-primary:5432 check inter 2s rise 2 fall 3 backup

# Admin backend for Patroni REST API
backend patroni_admin
    mode http
    balance roundrobin
    option httpchk GET /leader
    http-check expect status 200
    
    server patroni-primary postgresql-primary:8008 check inter 5s
    server patroni-replica1 postgresql-replica1:8009 check inter 5s
    server patroni-replica2 postgresql-replica2:8010 check inter 5s

# Frontend for Patroni admin access
frontend patroni_admin_frontend
    bind *:8080
    mode http
    default_backend patroni_admin

# Gaming-specific optimizations
backend postgresql_gaming_read
    mode tcp
    balance leastconn
    option tcp-check
    
    # Prioritize low-latency connections for gaming
    tcp-check connect
    tcp-check send-binary 00000016
    tcp-check send-binary 00030000
    tcp-check send-binary 7573657200
    tcp-check send-binary 706f737467726573
    tcp-check send-binary 0064617461626173650068656c6c6f00
    tcp-check send-binary 00
    tcp-check expect binary 52
    
    # Gaming read replicas with different priorities
    server gaming-replica1 postgresql-replica1:5432 check inter 1s rise 2 fall 2 weight 100
    server gaming-replica2 postgresql-replica2:5432 check inter 1s rise 2 fall 2 weight 80

# Special frontend for gaming read queries
frontend postgresql_gaming_frontend
    bind *:5433
    mode tcp
    default_backend postgresql_gaming_read

# Health check endpoint
frontend health_check
    bind *:8081
    mode http
    monitor-uri /health
    
    # Custom health check logic
    http-request return status 200 content-type text/plain string "HAProxy OK" if TRUE
