# PostgreSQL Configuration for Hokm Game Server
# Optimized for gaming workloads with high concurrency and real-time performance

# Connection Settings
listen_addresses = '*'
port = 5432
max_connections = 200
superuser_reserved_connections = 3

# Memory Settings (Gaming Optimized)
shared_buffers = 256MB                    # 25% of available RAM for gaming
effective_cache_size = 1GB                # Total memory available to OS and PostgreSQL
work_mem = 4MB                           # Memory for each query operation
maintenance_work_mem = 64MB              # Memory for maintenance operations
wal_buffers = 16MB                       # Write-ahead log buffer

# Checkpoint Settings (Optimized for write-heavy gaming workloads)
checkpoint_completion_target = 0.9       # Spread checkpoint I/O over 90% of interval
checkpoint_timeout = 10min               # Frequent checkpoints for gaming
max_wal_size = 2GB                      # Allow more WAL before checkpoint
min_wal_size = 1GB                      # Minimum WAL size

# Query Planner Settings
random_page_cost = 1.1                   # SSD-optimized
effective_io_concurrency = 200          # Number of concurrent I/O operations
seq_page_cost = 1.0                     # Sequential page cost

# Write-Ahead Logging (Gaming Optimized)
wal_level = replica                      # Enable replication
wal_compression = on                     # Compress WAL records
wal_log_hints = on                      # Enable hint bits in WAL
fsync = on                              # Ensure durability
synchronous_commit = on                  # Ensure commit durability
full_page_writes = on                   # Write full pages after checkpoint

# Replication Settings
max_wal_senders = 3                     # Allow up to 3 read replicas
wal_keep_size = 1GB                     # Keep WAL segments for replication
hot_standby = on                        # Allow queries on standby
hot_standby_feedback = on               # Prevent query conflicts

# Background Writer (Gaming Optimized)
bgwriter_delay = 100ms                  # Frequent background writes
bgwriter_lru_maxpages = 200            # Pages to write per round
bgwriter_lru_multiplier = 4.0          # Multiplier for next round

# Auto Vacuum Settings (Gaming Optimized)
autovacuum = on                         # Enable auto vacuum
autovacuum_max_workers = 4              # More workers for concurrent games
autovacuum_naptime = 30s               # More frequent vacuum cycles
autovacuum_vacuum_threshold = 25       # Lower threshold for small tables
autovacuum_analyze_threshold = 25      # Lower threshold for analyze

# Lock Management (Gaming Optimized)
max_locks_per_transaction = 256         # Higher lock limit for complex transactions
max_pred_locks_per_transaction = 256    # Higher predicate lock limit
deadlock_timeout = 500ms               # Quick deadlock detection

# Logging (Production Settings)
logging_collector = on
log_destination = 'stderr'
log_directory = '/var/log/postgresql'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_rotation_age = 1d
log_rotation_size = 100MB
log_min_duration_statement = 1000      # Log slow queries (>1s)
log_connections = on
log_disconnections = on
log_hostname = on
log_line_prefix = '%t [%p]: [%l-1] db=%d,user=%u,app=%a,client=%h '
log_statement = 'ddl'                  # Log DDL statements
log_temp_files = 10MB                  # Log temporary files > 10MB

# Statistics Settings
track_activities = on
track_counts = on
track_io_timing = on
track_functions = pl
stats_temp_directory = '/var/run/postgresql/stats_temp'

# Connection Pooling Compatibility (for pgBouncer)
track_commit_timestamp = off
ssl = off                              # Disable SSL for internal connections
shared_preload_libraries = 'pg_stat_statements,pg_buffercache'

# Gaming-Specific Optimizations
tcp_keepalives_idle = 300              # Keep TCP connections alive
tcp_keepalives_interval = 30           # TCP keepalive interval
tcp_keepalives_count = 3               # TCP keepalive probes

# JSON Processing (for game state storage)
max_worker_processes = 8               # More workers for JSON processing
max_parallel_workers = 4               # Parallel query workers
max_parallel_workers_per_gather = 2    # Workers per query

# Extension Settings
pg_stat_statements.max = 1000          # Track top 1000 queries
pg_stat_statements.track = all         # Track all statements
